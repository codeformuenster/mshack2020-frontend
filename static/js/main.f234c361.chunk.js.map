{"version":3,"sources":["dashboard/Title.tsx","dashboard/Dashboard.tsx","dashboard/Router.tsx","dashboard/theme.ts","serviceWorker.ts","index.tsx"],"names":["Title","props","Typography","component","variant","color","gutterBottom","children","Copyright","align","Link","href","Date","getFullYear","useStyles","makeStyles","theme","root","display","toolbar","paddingRight","toolbarIcon","alignItems","justifyContent","padding","mixins","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","menuButton","marginRight","menuButtonHidden","title","flexGrow","drawerPaper","position","whiteSpace","width","enteringScreen","drawerPaperClose","overflowX","spacing","breakpoints","up","appBarSpacer","content","height","overflow","container","paddingTop","paddingBottom","paper","flexDirection","fixedHeight","Dashboard","classes","useState","counts","setCounts","devices","setDevices","latitude","longitude","zoom","viewport","setViewport","useEffect","a","axios","result_counts","data","result_devices","fetchData","console","log","className","CssBaseline","AppBar","clsx","Toolbar","noWrap","Container","maxWidth","Grid","item","xs","onViewportChange","nextViewport","mapboxApiAccessToken","Paper","Table","size","TableHead","TableRow","TableCell","TableBody","map","device","key","id","lon","lat","Box","pt","DashboardRouter","path","exact","createMuiTheme","palette","primary","main","secondary","green","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f234c361.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography';\n\nexport default function Title(props:any) {\n  return (\n    <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\n      {props.children}\n    </Typography>\n  );\n}\n\nTitle.propTypes = {\n  children: PropTypes.node,\n};\n","import React, { useEffect, useState } from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Box from '@material-ui/core/Box';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Link from '@material-ui/core/Link';\nimport axios from 'axios';\nimport { Table, TableHead, TableRow, TableCell, TableBody } from '@material-ui/core';\nimport Title from './Title';\nimport ReactMapGL from 'react-map-gl';\n\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright © '}\n      <Link color=\"inherit\" href=\"http://codeformuenster.org/\">\n        Münster Zählt\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  toolbar: {\n    paddingRight: 24, // keep right padding when drawer closed\n  },\n  toolbarIcon: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    padding: '0 8px',\n    ...theme.mixins.toolbar,\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: 36,\n  },\n  menuButtonHidden: {\n    display: 'none',\n  },\n  title: {\n    flexGrow: 1,\n  },\n  drawerPaper: {\n    position: 'relative',\n    whiteSpace: 'nowrap',\n    width: drawerWidth,\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerPaperClose: {\n    overflowX: 'hidden',\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    width: theme.spacing(7),\n    [theme.breakpoints.up('sm')]: {\n      width: theme.spacing(9),\n    },\n  },\n  appBarSpacer: theme.mixins.toolbar,\n  content: {\n    flexGrow: 1,\n    height: '100vh',\n    overflow: 'auto',\n  },\n  container: {\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(4),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    display: 'flex',\n    overflow: 'auto',\n    flexDirection: 'column',\n  },\n  fixedHeight: {\n    height: 240,\n  },\n}));\n\nexport default function Dashboard() {\n  const classes = useStyles();\n\n  const [counts, setCounts] = useState();\n  const [devices, setDevices] = useState<{ id: string, data: any, lon: number, lat: number }[] | undefined>();\n  const [viewport, setViewport] = useState({\n    width: 400,\n    height: 400,\n    latitude: 37.7577,\n    longitude: -122.4376,\n    zoom: 8\n  });\n\n  useEffect(() => {\n    async function fetchData() {\n      const result_counts = await axios(\n        'https://counting-backend.codeformuenster.org/counts',\n      );\n      setCounts(result_counts.data);\n      const result_devices = await axios(\n        'https://counting-backend.codeformuenster.org/devices',\n      );\n      setDevices(result_devices.data);\n    }\n    fetchData()\n  }, []);\n\n  console.log(counts)\n  console.log(devices)\n\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"absolute\" className={clsx(classes.appBar)}>\n        <Toolbar className={classes.toolbar}>\n          <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\n            Dashboard\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <main className={classes.content}>\n        <div className={classes.appBarSpacer} />\n        <Container maxWidth=\"lg\" className={classes.container}>\n          <Grid container spacing={3}>\n            <Grid item xs={12} >\n              <ReactMapGL\n                {...viewport}\n                onViewportChange={nextViewport => setViewport(nextViewport)}\n                mapboxApiAccessToken={\"pk.eyJ1Ijoic2ltc2Fsb3IiLCJhIjoiY2tmamhwMWVyMGhmMDMwcWh6MXdiM2VteCJ9.PCIgKMZhUfVyhyECwTQKpg\"}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <Paper className={classes.paper}>\n                <Title>Devices</Title>\n                <Table size=\"small\">\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Id</TableCell>\n                      <TableCell>Longitude</TableCell>\n                      <TableCell>Latidue</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {devices && devices.map((device: any) => {\n                      return (\n                        <TableRow key={device.id} >\n                          <TableCell>{device.id}</TableCell>\n                          <TableCell>{device.lon}</TableCell>\n                          <TableCell>{device.lat}</TableCell>\n                        </TableRow>\n                      )\n                    })}\n                  </TableBody>\n                </Table>\n              </Paper>\n            </Grid>\n          </Grid>\n          <Box pt={4}>\n            <Copyright />\n          </Box>\n        </Container>\n      </main>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n} from \"react-router-dom\";\nimport axios from 'axios';\nimport Dashboard from \"./Dashboard\";\nimport { Typography } from \"@material-ui/core\";\n\n\nexport default function DashboardRouter() {\n\n    const [devices, setDevices] = useState<{ id: string, data: any, lon: number, lat: number }[] | undefined>();\n\n    useEffect(() => {\n        async function fetchData() {\n            const result_devices = await axios(\n                'https://counting-backend.codeformuenster.org/devices',\n            );\n            setDevices(result_devices.data);\n        }\n        fetchData()\n    }, []);\n    console.log(devices)\n\n    return (\n        <Router>\n            <Switch>\n                <Route path=\"/\" exact>\n                    <Dashboard />\n                </Route>\n                <Route path={\"/:id\"}>\n                    <Typography>hello</Typography>\n                </Route>\n\n\n            </Switch>\n        </Router>\n    );\n}\n","import { createMuiTheme } from '@material-ui/core/styles';\nimport green from '@material-ui/core/colors/green';\n\nexport const theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#0CB053\",\n    },\n    secondary: {\n      main: green[500],\n    },\n  },\n});","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ThemeProvider } from '@material-ui/core';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport DashboardRouter from './dashboard/Router';\nimport { theme } from './dashboard/theme';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <DashboardRouter />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}